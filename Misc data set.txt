# Find path
def find_path(maze, start, end, path=[]):
    path = path + [start]
    if start == end:
        return path
    if start not in maze:
        return None
    for neighbor in maze[start]:
        if neighbor not in path:
            new_path = find_path(maze, neighbor, end, path)
            if new_path:
                return new_path
    return None

#Generate combinations
def generate_combinations(arr, k, current=[]):
    if k == 0:
        print(current)
        return
    if not arr:
        return
    generate_combinations(arr[1:], k - 1, current + [arr[0]])
    generate_combinations(arr[1:], k, current)

# reverse string
def reverse_string(s):
    if not s:
        return s
    return reverse_string(s[1:]) + s[0]

# Tower of honoi
def tower_of_hanoi(n, source, auxiliary, target):
    if n == 1:
        print(f"Move disk 1 from {source} to {target}")
        return
    tower_of_hanoi(n-1, source, target, auxiliary)
    print(f"Move disk {n} from {source} to {target}")
    tower_of_hanoi(n-1, auxiliary, source, target)


# Count digits
def count_digits(num):
    if num == 0:
        return 0
    return 1 + count_digits(num // 10)

# Array Sum
def array_sum(arr):
    if not arr:
        return 0
    return arr[0] + array_sum(arr[1:])